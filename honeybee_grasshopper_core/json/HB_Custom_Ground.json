{
  "version": "1.8.0", 
  "nickname": "CustomGround", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "rooms", 
        "description": "The input Rooms with their Ground boundary conditions set.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "Honeybee Rooms which will have their Face boundary conditions set\nbased on their spatial relation to the _ground geometry below.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_ground", 
      "description": "Rhino Breps or Meshes that represent the Ground.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "reset_", 
      "description": "A Boolean to note whether the _ground geometry simply adds additional\nground boundary conditions to the _rooms (False) or it resets\nall existing ground boundary conditions to only exist at or below\nthe _ground geometry (True). (Default: False).", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the honeybee dependencies\n    from honeybee.boundarycondition import Ground, boundary_conditions\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import tolerance, angle_tolerance\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # process the inputs\n    rooms = [room.duplicate() for room in _rooms]  # duplicate to avoid editing input\n    ground_faces = [g for geo in _ground for g in to_face3d(geo)]  # convert to lb geometry\n\n    # reset the boundary conditions if requested\n    if reset_:\n        for room in rooms:\n            for face in room.faces:\n                if isinstance(face.boundary_condition, Ground):\n                    face.boundary_condition = boundary_conditions.outdoors\n\n    # loop through the rooms and set the ground boundary conditions\n    for room in rooms:\n        room.ground_by_custom_surface(ground_faces, tolerance, angle_tolerance)\n", 
  "category": "Honeybee", 
  "name": "HB Custom Ground", 
  "description": "Set the boundary conditions of Rooms to be Ground vs. Outdoors using a surface or\npolysurface that represents the ground.\n_\nRoom faces that are coplanar with the ground surface or have a center below it\nwill get a Ground boundary condition. Existing Faces with a Surface/Adiabatic\ncondition, AirBoundary type, or assigned Apertures/Doors will be unaffected.\n_\nNote that this component will not intersect the Faces with the ground surface and\nthis is intersection should be done prior to the creation of the Honeybee Rooms.\n-"
}