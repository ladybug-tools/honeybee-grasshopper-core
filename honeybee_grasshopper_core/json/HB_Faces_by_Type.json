{
  "version": "1.7.0", 
  "nickname": "FacesByType", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "walls", 
        "description": "The Walls with an Outdoors or Ground boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "interior_walls", 
        "description": "The Walls with a Surface or Adiabatic boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "roofs", 
        "description": "The RoofCeilings with an Outdoors or Ground boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "ceilings", 
        "description": "The RoofCeilings with a Surface or Adiabatic boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "exterior_floors", 
        "description": "The Floors with an Outdoors or Ground boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "interior_floors", 
        "description": "The Floors with a Surface or Adiabatic boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "air_walls", 
        "description": "The AirWalls.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "apertures", 
        "description": "The Apertures with an Outdoors boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "interior_apertures", 
        "description": "The Apertures with a Surface boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "doors", 
        "description": "The Doors with an Outdoors boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "interior_doors", 
        "description": "The Doors with a Surface boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "outdoor_shades", 
        "description": "The Shades assigned to the outdoors of their parent objects.\nThis also includes all orphaned shades of a model.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "indoor_shades", 
        "description": "The Shades assigned to the indoors of their parent objects.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "Honeybee Rooms, Faces, Apertures, Doors and/or Shades which will be\nseparated based on object and face type. This can also be an entire\nhoneybee Model.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Organize", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.aperture import Aperture\n    from honeybee.door import Door\n    from honeybee.shade import Shade\n    from honeybee.boundarycondition import Surface\n    from honeybee.facetype import Wall, RoofCeiling, Floor, AirBoundary\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee.boundarycondition import Adiabatic\nexcept ImportError:  # honeybee-energy not installed\n    Adiabatic = None  # don't worry about Aidabatic; Surface is the only interior bc\n\n\ndef add_shade(hb_obj):\n    \"\"\"Add an object's shades to the relevant lists.\"\"\"\n    outdoor_shades.extend([shd for shd in hb_obj.outdoor_shades])\n    indoor_shades.extend([shd for shd in hb_obj.indoor_shades])\n\ndef add_door(dr):\n    \"\"\"Add a door to the relevant lists.\"\"\"\n    bc = dr.boundary_condition\n    add_shade(dr)\n    if isinstance(bc, Surface):\n        interior_doors.append(dr)\n    else:\n        doors.append(dr)\n\ndef add_aperture(ap):\n    \"\"\"Add an aperture to the relevant lists.\"\"\"\n    bc = ap.boundary_condition\n    add_shade(ap)\n    if isinstance(bc, Surface):\n        interior_apertures.append(ap)\n    else:\n        apertures.append(ap)\n\ndef add_face(face):\n    \"\"\"Add a face to the relevant lists.\"\"\"\n    add_shade(face)\n    bc = face.boundary_condition\n    type = face.type\n    if isinstance(type, Wall):\n        if isinstance(bc, (Surface, Adiabatic)):\n            interior_walls.append(face)\n        else:\n            walls.append(face)\n    elif isinstance(type, RoofCeiling):\n        if isinstance(bc, (Surface, Adiabatic)):\n            ceilings.append(face)\n        else:\n            roofs.append(face)\n    elif isinstance(type, Floor):\n        if isinstance(bc, (Surface, Adiabatic)):\n            interior_floors.append(face)\n        else:\n            exterior_floors.append(face)\n    elif isinstance(type, AirBoundary):\n        air_walls.append(face)\n\n    # add the apertures, doors, and shades\n    for ap in face.apertures:\n        add_aperture(ap)\n    for dr in face.doors:\n        add_door(dr)\n\n\nif all_required_inputs(ghenv.Component):\n    # lists of {{cad}} geometry to be filled with content\n    walls = []\n    interior_walls = []\n    roofs = []\n    ceilings = []\n    exterior_floors = []\n    interior_floors = []\n    air_walls = []\n    apertures = []\n    interior_apertures = []\n    doors = []\n    interior_doors = []\n    outdoor_shades = []\n    indoor_shades = []\n\n    # loop through all objects and add them\n    for obj in _hb_objs:\n        if isinstance(obj, Model):\n            for room in obj.rooms:\n                for face in room.faces:\n                    add_face(face)\n            for face in obj.orphaned_faces:\n                add_face(face)\n            for ap in obj.orphaned_apertures:\n                add_aperture(ap)\n            for dr in obj.orphaned_doors:\n                add_door(dr)\n            outdoor_shades.extend([shd for shd in obj.orphaned_shades])\n        elif isinstance(obj, Room):\n            add_shade(obj)\n            for face in obj:\n                add_face(face)\n        elif isinstance(obj, Face):\n            add_face(obj)\n        elif isinstance(obj, Aperture):\n            add_aperture(obj)\n        elif isinstance(obj, Door):\n            add_door(obj)\n        elif isinstance(obj, Shade):\n            outdoor_shades.append(obj)", 
  "category": "Honeybee", 
  "name": "HB Faces by Type", 
  "description": "Separate the faces/sub-faces of honeybee Rooms, Faces, Apertures, Doors, or Shades\nby object and face type.\n-"
}