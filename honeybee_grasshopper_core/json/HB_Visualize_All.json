{
  "version": "1.7.1", 
  "nickname": "VizAll", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "geo", 
        "description": "The Rhino version of the Honeybee geometry object, which will be\nvisible in the Rhino scene.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "A Honeybee Model, Room, Face, Shade, Aperture, or Door to be\npreviewed in the Rhino scene.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Visualize", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.aperture import Aperture\n    from honeybee.door import Door\n    from honeybee.shade import Shade\n    from honeybee.shademesh import ShadeMesh\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the core ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.fromgeometry import from_face3d, from_mesh3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\nimport {{Cad}}.Geometry as rg\n\n\ndef add_shade(shd, shades):\n    \"\"\"Add Shade geometry to a shades list.\"\"\"\n    shades.append(from_face3d(shd.geometry))\n\ndef add_door(door, geo, shades):\n    \"\"\"Add Door geometry to a geo list and shades list.\"\"\"\n    geo.append(from_face3d(door.geometry))\n    for shd in door.shades:\n        add_shade(shd, shades)\n\ndef add_aperture(aperture, geo, shades):\n    \"\"\"Add Aperture geometry to a geo and shades list.\"\"\"\n    geo.append(from_face3d(aperture.geometry))\n    for shd in aperture.shades:\n        add_shade(shd, shades)\n\ndef add_face(face, geo, shades):\n    \"\"\"Add Face geometry to a geo and shades list.\"\"\"\n    geo.append(from_face3d(face.punched_geometry))\n    for ap in face.apertures:\n        add_aperture(ap, geo, shades)\n    for dr in face.doors:\n        add_door(dr, geo, shades)\n    for shd in face.shades:\n        add_shade(shd, shades)\n\ndef add_room(room, geo, shades):\n    \"\"\"Add Room geometry to a geo and shades list.\"\"\"\n    face_breps = []\n    for face in room.faces:\n        add_face(face, face_breps, shades)\n    for shd in room.shades:\n        add_shade(shd, shades)\n    geo.extend(rg.Brep.JoinBreps(face_breps, tolerance))\n\ndef add_model(model, geo, shades):\n    \"\"\"Add Model geometry to a geo and shades list.\"\"\"\n    for room in model.rooms:\n        add_room(room, geo, shades)\n    for face in model.orphaned_faces:\n        add_face(face, geo, shades)\n    for ap in model.orphaned_apertures:\n        add_aperture(ap, geo, shades)\n    for dr in model.orphaned_doors:\n        add_door(dr, geo, shades)\n    for shd in model.orphaned_shades:\n        add_shade(shd, shades)\n    for sm in model.shade_meshes:\n        shades.append(from_mesh3d(sm.geometry))\n\n\nif all_required_inputs(ghenv.Component):\n    # lists of {{cad}} geometry to be filled with content\n    geo = []\n    shades = []\n\n    # loop through all objects and add them\n    for hb_obj in _hb_objs:\n        if isinstance(hb_obj, Room):\n            add_room(hb_obj, geo, shades)\n        elif isinstance(hb_obj, Shade):\n            add_shade(hb_obj, shades)\n        elif isinstance(hb_obj, ShadeMesh):\n            shades.append(from_mesh3d(hb_obj.geometry))\n        elif isinstance(hb_obj, Face):\n            add_face(hb_obj, geo, shades)\n        elif isinstance(hb_obj, Aperture):\n            add_aperture(hb_obj, geo, shades)\n        elif isinstance(hb_obj, Door):\n            add_door(hb_obj, geo, shades)\n        elif isinstance(hb_obj, Model):\n            add_model(hb_obj, geo, shades)\n        else:\n            raise TypeError(\n                'Unrecognized honeybee object type: {}'.format(type(hb_obj)))\n\n    # group the shade geometry with the other objects\n    geo.extend(shades)", 
  "category": "Honeybee", 
  "name": "HB Visualize All", 
  "description": "Preview any Honeybee geometry object within the Rhino scene, including all\nsub-faces and assigned shades.\n-"
}