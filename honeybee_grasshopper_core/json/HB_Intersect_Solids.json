{
  "version": "1.8.0", 
  "nickname": "IntSolid", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "int_rooms", 
        "description": "The same input Rooms or closed breps that have had their component\nfaces split by adjacent geometries to have matching surfaces.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "A list of Honeybee Rooms or closed Rhino breps (polysurfaces) that\ndo not have matching adjacent Faces.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_cpu_count_", 
      "description": "An integer to set the number of CPUs used in the execution of the\nintersection calculation. If unspecified, it will automatically default\nto one less than the number of CPUs currently available on the\nmachine or 1 if only one processor is available.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to True to run the component.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\n\ntry:  # import the honeybee dependencies\n    from honeybee.room import Room\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.intersect import bounding_box, intersect_solids, \\\n        intersect_solids_parallel\n    from ladybug_{{cad}}.config import tolerance, angle_tolerance\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, \\\n        recommended_processor_count, run_function_in_parallel\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    # get the number of CPUs to use\n    workers = _cpu_count_ if _cpu_count_ is not None else recommended_processor_count()\n\n    if isinstance(_rooms[0], Room):\n        # assume that all inputs are Honeybee Rooms\n        int_rooms = [room.duplicate() for room in _rooms]\n        if workers <= 1:\n            Room.intersect_adjacency(int_rooms, tolerance, angle_tolerance)\n        else:\n            room_geos = [r.geometry for r in int_rooms]\n            def intersect_room(r_count):\n                rel_room = int_rooms[r_count]\n                other_rooms = room_geos[:r_count] + room_geos[r_count + 1:]\n                rel_room.coplanar_split(other_rooms, tolerance, angle_tolerance)\n            run_function_in_parallel(intersect_room, len(room_geos), workers)\n    else:\n        # assume that all inputs are closed {{Cad}} Breps\n        b_boxes = [bounding_box(brep) for brep in _rooms]\n        if workers > 1:\n            int_rooms = intersect_solids_parallel(_rooms, b_boxes, workers)\n        else:  # just use the single-core process\n            int_rooms = intersect_solids(_rooms, b_boxes)\n", 
  "category": "Honeybee", 
  "name": "HB Intersect Solids", 
  "description": "Take a list of Honeybee Rooms closed breps (polysurfaces) and split their Faces\nto ensure that there are matching coplanar faces between them.\n_\nThis matching between Room faces is required in order to contruct a correct\nmulti-room energy model since conductive heat flow won't occur correctly across\ninterior faces when their surface areas do not match.\n-"
}