{
  "version": "1.6.1", 
  "nickname": "LouverShades", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "readMe!", 
        "description": "Reports, errors, warnings, etc.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "hb_objs", 
        "description": "The input Honeybee Face or Room or Aperture with louvered shades\nadded to it.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "A list of honeybee Rooms, Faces, or Apertures to which louver\nshades will be added.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_depth", 
      "description": "A number for the depth to extrude the louvers. If an array of values\nare input here, different depths will be assigned based on\ncardinal direction, starting with north and moving clockwise.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_shade_count_", 
      "description": "A positive integer for the number of louvers to generate.\nIf there is an input below for _dist_between_, an attempt will\nstill be made to meet the _shade_count_ but, if there are more\nshades than can fit on the input hb_obj, the number of shades\nwill be truncated. If an array of values are input here, different\nshade counts will be assigned based on cardinal direction, starting\nwith north and moving clockwise. (Default: 1).", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_dist_between_", 
      "description": "A number for the approximate distance between each louver.\nIf an array of values are input here, different distances between\nlouvers will be assigned based on cardinal direction, starting\nwith north and moving clockwise.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_facade_offset_", 
      "description": "A number for the distance from the louver edge to the\nfacade. If an array of values are input here, different offsets will\nbe assigned based on cardinal direction, starting with north and\nmoving clockwise. (Default: 0).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_angle_", 
      "description": "A number for the for an angle to rotate the louvers in degrees.\nIf an array of values are input here, different angles will be\nassigned based on cardinal direction, starting with north and moving\nclockwise. (Default: 0).", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "vertical_", 
      "description": "Optional boolean to note whether the lovers are vertical. If False,\nthe louvers will be horizontal. If an array of values are input\nhere, different vertical booleans will be assigned based on cardinal\ndirection, starting with north and moving clockwise. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "flip_start_", 
      "description": "Optional boolean to note whether the side the louvers start\nfrom should be flipped. If False, louvers will be generated starting\non top or the right side. If True, louvers will start from the\nbottom or left. If an array of values are input here, different\nflip start booleans will be assigned based on cardinal direction,\nstarting with north and moving clockwise. Default: False.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "indoor_", 
      "description": "Optional boolean for whether louvers should be generated facing the\nopposite direction of the aperture normal and added to the Aperture's\nindoor_shades instead of outdoor_shades. If an array of values are\ninput here, different indoor booleans will be assigned based on\ncardinal direction, starting with north and moving clockwise.\nNote that, by default, indoor shades are not used in energy simulations\nbut they are used in all simulations involving Radiance. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ep_constr_", 
      "description": "Optional Honeybee ShadeConstruction to be applied to the input _hb_objs.\nThis can also be text for a construction to be looked up in the shade\nconstruction library. If an array of text or construction objects\nare input here, different constructions will be assigned based on\ncardinal direction, starting with north and moving clockwise.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ep_trans_sch_", 
      "description": "Optional schedule for the transmittance to be applied to the\ninput _hb_objs in energy simulation. If no energy schedule is\ninput here, the default will be always opaque.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "rad_mod_", 
      "description": "Optional Honeybee Modifier to be applied to the input _hb_objs.\nThis can also be text for a modifier to be looked up in the shade\nmodifier library. If an array of text or modifier objects\nare input here, different modifiers will be assigned based on\ncardinal direction, starting with north and moving clockwise.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the ladybug_geometry dependencies\n    from ladybug_geometry.geometry2d.pointvector import Vector2D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee dependencies\n    from honeybee.boundarycondition import Outdoors\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.face import Aperture\n    from honeybee.facetype import Wall\n    from honeybee.orientation import check_matching_inputs, angles_from_num_orient, \\\n        face_orient_index, inputs_by_index\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.lib.constructions import shade_construction_by_identifier\n    from honeybee_energy.lib.schedules import schedule_by_identifier\nexcept ImportError as e:\n    if len(ep_constr_) != 0:\n        raise ValueError('ep_constr_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n\ntry:  # import the honeybee-radiance extension\n    from honeybee_radiance.lib.modifiers import modifier_by_identifier\nexcept ImportError as e:\n    if len(rad_mod_) != 0:\n        raise ValueError('rad_mod_ has been specified but honeybee-radiance '\n                         'has failed to import.\\n{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, document_counter\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef can_host_louvers(face):\n    \"\"\"Test if a face is intended to host louvers (according to this component).\"\"\"\n    return isinstance(face.boundary_condition, Outdoors) and \\\n        isinstance(face.type, Wall)\n\n\ndef assign_louvers(ap, depth, count, dist, off, angle, vec, flip, indr, ep, ep_tr, rad, bn):\n    \"\"\"Assign louvers to an Aperture based on a set of inputs.\"\"\"\n    if depth == 0 or count == 0:\n        return None\n    if dist is None:\n        louvers = ap.louvers_by_count(\n            count, depth, off, angle, vec, flip, indr, tolerance, base_name=bn)\n    else:\n        louvers = ap.louvers_by_distance_between(\n            dist, depth, off, angle, vec, flip, indr, tolerance,\n            max_count=count, base_name=bn)\n\n    # try to assign the energyplus construction and transmittance schedule\n    if ep is not None:\n        for shd in louvers:\n            shd.properties.energy.construction = ep\n    if ep_tr is not None:\n        for shd in louvers:\n            shd.properties.energy.transmittance_schedule = ep_tr\n    # try to assign the radiance modifier\n    if rad is not None:\n        for shd in louvers:\n            shd.properties.radiance.modifier = rad\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    hb_objs = [obj.duplicate() for obj in _hb_objs]\n\n    # set defaults for any blank inputs\n    _facade_offset_ = _facade_offset_ if len(_facade_offset_) != 0 else [0.0]\n    _angle_ = _angle_ if len(_angle_) != 0 else [0.0]\n    flip_start_ = flip_start_ if len(flip_start_) != 0 else [False]\n    indoor_ = indoor_ if len(indoor_) != 0 else [False]\n\n    # get a unique base name for the shades\n    b_name = 'Louver{}'.format(document_counter('louver_count'))\n\n    # process the defaults for _shade_count_ vs _dist_between\n    if len(_shade_count_) != 0 and len(_dist_between_) != 0:\n        pass\n    elif len(_shade_count_) == 0 and len(_dist_between_) == 0:\n        _shade_count_ = [1]\n        _dist_between_ = [None]\n    elif len(_shade_count_) != 0:\n        _dist_between_ = [None]\n    else:\n        _shade_count_ = [None]\n\n    # process the vertical_ input into a direction vector\n    if len(vertical_) != 0:\n        vertical_ = [Vector2D(1, 0) if vert else Vector2D(0, 1)\n                     for vert in vertical_]\n    else:\n        vertical_ = [Vector2D(0, 1)]\n\n    # process the input constructions and shade transmittances\n    if len(ep_constr_) != 0:\n        for i, constr in enumerate(ep_constr_):\n            if isinstance(constr, str):\n                ep_constr_[i] = shade_construction_by_identifier(constr)\n    else:\n        ep_constr_ = [None]\n    if len(ep_trans_sch_) != 0:\n        for i, sch in enumerate(ep_trans_sch_):\n            if isinstance(sch, str):\n                ep_trans_sch_[i] = schedule_by_identifier(sch)\n    else:\n        ep_trans_sch_ = [None]\n\n    # process the input modifiers\n    if len(rad_mod_) != 0:\n        for i, mod in enumerate(rad_mod_):\n            if isinstance(mod, str):\n                rad_mod_[i] = modifier_by_identifier(mod)\n    else:\n        rad_mod_ = [None]\n\n    # gather all of the inputs together\n    all_inputs = [_depth, _shade_count_, _dist_between_, _facade_offset_, _angle_,\n                  vertical_, flip_start_, indoor_, ep_constr_, ep_trans_sch_, rad_mod_]\n\n    # ensure matching list lengths across all values\n    all_inputs, num_orient = check_matching_inputs(all_inputs)\n\n    # get a list of angles used to categorize the faces\n    angles = angles_from_num_orient(num_orient)\n\n    # loop through the input objects and add apertures\n    for obj in hb_objs:\n        if isinstance(obj, Room):\n            for face in obj.faces:\n                if can_host_louvers(face):\n                    orient_i = face_orient_index(face, angles)\n                    depth, count, dist, off, angle, vec, flip, indr, con, sh_t, mod = \\\n                        inputs_by_index(orient_i, all_inputs)\n                    for ap in face.apertures:\n                        assign_louvers(ap, depth, count, dist, off, angle, vec,\n                                       flip, indr, con, sh_t, mod, b_name)\n        elif isinstance(obj, Face):\n            if can_host_louvers(obj):\n                orient_i = face_orient_index(obj, angles)\n                depth, count, dist, off, angle, vec, flip, indr, con, sh_t, mod = \\\n                    inputs_by_index(orient_i, all_inputs)\n                for ap in obj.apertures:\n                    assign_louvers(ap, depth, count, dist, off, angle, vec,\n                                   flip, indr, con, sh_t, mod, b_name)\n        elif isinstance(obj, Aperture):\n            orient_i = face_orient_index(obj, angles)\n            depth, count, dist, off, angle, vec, flip, indr, con, sh_t, mod = \\\n                inputs_by_index(orient_i, all_inputs)\n            assign_louvers(obj, depth, count, dist, off, angle, vec, flip,\n                           indr, con, sh_t, mod, b_name)\n        else:\n            raise TypeError(\n                'Input _hb_objs must be a Room, Face, or Aperture. Not {}.'.format(type(obj)))", 
  "category": "Honeybee", 
  "name": "HB Louver Shades", 
  "description": "Add louverd Shades, overhangs or fins to all the outdoor Apertures of an input\nRoom, Face or Aperture.\n_\nNote that, if a Face or Room is input, Shades will only be added to those Faces\nthat are Walls (not Floors or Roofs).\n-"
}