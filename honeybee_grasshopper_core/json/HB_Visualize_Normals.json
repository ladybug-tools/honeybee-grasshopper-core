{
  "version": "1.7.0", 
  "nickname": "VizNorm", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "points", 
        "description": "Points that lie at the center of each surface of the connected _hb_objs.\nThese should be connected to the \"Anchor\" input of a native Grasshopper\n\"Vector Display\" component.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "vectors", 
        "description": "Normal vectors for each surface of the connected _hb_objs. These\nshould be connected to the \"Vector\" input of a native Grasshopper\n\"Vector Display\" component.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "A Honeybee Model, Room, Face, Shade, Aperture, or Door for which\npoints and vectors will be output in the Rhino scene to show the\nobject's orientation.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Visualize", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.aperture import Aperture\n    from honeybee.door import Door\n    from honeybee.shade import Shade\n    from honeybee.units import parse_distance_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import units_system\n    from ladybug_{{cad}}.fromgeometry import from_point3d, from_vector3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\n# tolerance for computing the pole of inaccessibility\np_tol = parse_distance_string('0.01m', units_system())\n\n\ndef point_on_face(f_geo):\n    \"\"\"Get a point that lies on a Face3D.\"\"\"\n    return f_geo.center if f_geo.is_convex else f_geo.pole_of_inaccessibility(p_tol)\n\n\ndef add_door(door, points, vectors):\n    \"\"\"Add Door normals.\"\"\"\n    points.append(from_point3d(point_on_face(door.geometry)))\n    vectors.append(from_vector3d(door.normal))\n    for shd in door.shades:\n        points.append(from_point3d(point_on_face(shd.geometry)))\n        vectors.append(from_vector3d(shd.normal))\n\ndef add_aperture(aperture, points, vectors):\n    \"\"\"Add Aperture normals.\"\"\"\n    points.append(from_point3d(point_on_face(aperture.geometry)))\n    vectors.append(from_vector3d(aperture.normal))\n    for shd in aperture.shades:\n        points.append(from_point3d(point_on_face(shd.geometry)))\n        vectors.append(from_vector3d(shd.normal))\n\ndef add_face(face, points, vectors):\n    \"\"\"Add Face normals.\"\"\"\n    points.append(from_point3d(point_on_face(face.geometry)))\n    vectors.append(from_vector3d(face.normal))\n    for ap in face.apertures:\n        add_aperture(ap, points, vectors)\n    for dr in face.doors:\n        add_door(dr, points, vectors)\n    for shd in face.shades:\n        points.append(from_point3d(point_on_face(shd.geometry)))\n        vectors.append(from_vector3d(shd.normal))\n\ndef add_room(room, points, vectors):\n    \"\"\"Add Room normals.\"\"\"\n    for face in room.faces:\n        add_face(face, points, vectors)\n    for shd in room.shades:\n        points.append(from_point3d(point_on_face(shd.geometry)))\n        vectors.append(from_vector3d(shd.normal))\n\ndef add_model(model, points, vectors):\n    \"\"\"Add Model normals.\"\"\"\n    for room in model.rooms:\n        add_room(room, points, vectors)\n    for face in model.orphaned_faces:\n        add_face(face, points, vectors)\n    for ap in model.orphaned_apertures:\n        add_aperture(ap, points, vectors)\n    for dr in model.orphaned_doors:\n        add_door(door, points, vectors)\n    for shd in model.orphaned_shades:\n        points.append(from_point3d(point_on_face(shd.geometry)))\n        vectors.append(from_vector3d(shd.normal))\n\n\nif all_required_inputs(ghenv.Component):\n    # list of {{cad}} geometry to be filled with content\n    points = []\n    vectors = []\n\n    # loop through all objects and add them\n    for hb_obj in _hb_objs:\n        if isinstance(hb_obj, Room):\n            add_room(hb_obj, points, vectors)\n        elif isinstance(hb_obj, Face):\n            add_face(hb_obj, points, vectors)\n        elif isinstance(hb_obj, Aperture):\n            add_aperture(hb_obj, points, vectors)\n        elif isinstance(hb_obj, Door):\n            add_door(hb_obj, points, vectors)\n        elif isinstance(hb_obj, Shade):\n            points.append(from_point3d(hb_obj.center))\n            vectors.append(from_vector3d(hb_obj.normal))\n        elif isinstance(hb_obj, Model):\n            add_model(hb_obj, points, vectors)\n        else:\n            raise TypeError(\n                'Unrecognized honeybee object type: {}'.format(type(hb_obj)))\n", 
  "category": "Honeybee", 
  "name": "HB Visualize Normals", 
  "description": "Get aligned points and vectors to preview the normal direction of any Honeybee\ngeometry object the Rhino scene, including all sub-faces and assigned shades.\n-"
}