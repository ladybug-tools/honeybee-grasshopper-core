{
  "version": "1.0.0", 
  "nickname": "VizByBC", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "outdoors", 
        "description": "Rhino geometry for the faces with an Outdoors boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "surface", 
        "description": "Rhino geometry for the faces with a Surface (interior) boundary\ncondition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "ground", 
        "description": "Rhino geometry for the faces with a Ground boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "adiabatic", 
        "description": "Rhino geometry for the faces with an adiabatic (no heat flow)\nboundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "other", 
        "description": "Rhino geometry for all faces with a boundary condition other than\nthe four above.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "wire_frame", 
        "description": "A list of lines representing the outlines of the rooms.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "Honeybee Rooms for which you would like to preview geometry\nin the Rhino scene based on boundary condition. This can also be an\nentire honeybee Model.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Visualize", 
  "code": "\ntry:  # import the ladybug dependencies\n    from ladybug.color import Colorset\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.boundarycondition import Outdoors, Surface, Ground\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.fromgeometry import from_face3ds_to_colored_mesh, \\\n        from_face3d_to_wireframe\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy dependencies\n    from honeybee.boundarycondition import Adiabatic\nexcept ImportError:  # honeybee-energy is not installed\n    Adiabatic = None  # don't worry about the Adiabatic bc\n\n\ndef add_face(face, geo_list):\n    geo_list.append(face.punched_geometry)\n    for ap in face.apertures:\n        geo_list.append(ap.geometry)\n    for dr in face.doors:\n        geo_list.append(dr.geometry)\n\n\nif all_required_inputs(ghenv.Component):\n    # lists of {{cad}} geometry to be filled with content\n    _outdoors = []\n    _surface = []\n    _ground = []\n    _adiabatic = []\n    _other = []\n\n    # extract any rooms from input Models\n    rooms = []\n    for hb_obj in _rooms:\n        if isinstance(hb_obj, Model):\n            rooms.extend(hb_obj.rooms)\n        else:\n            rooms.append(hb_obj)\n\n    # loop through all objects and add them\n    for room in rooms:\n        for face in room:\n            bc = face.boundary_condition\n            if isinstance(bc, Outdoors):\n                add_face(face, _outdoors)\n            elif isinstance(bc, Surface):\n                add_face(face, _surface)\n            elif isinstance(bc, Ground):\n                add_face(face, _ground)\n            elif isinstance(bc, Adiabatic):\n                add_face(face, _adiabatic)\n            else:\n                add_face(face, _other)\n\n    # color all of the geometry with its respective surface type\n    palette = Colorset.openstudio_palette()\n    outdoors = from_face3ds_to_colored_mesh(_outdoors, palette[9]) \\\n        if len(_outdoors) != 0 else None\n    surface = from_face3ds_to_colored_mesh(_surface, palette[13]) \\\n        if len(_surface) != 0 else None\n    ground = from_face3ds_to_colored_mesh(_ground, palette[2]) \\\n        if len(_ground) != 0 else None\n    adiabatic = from_face3ds_to_colored_mesh(_adiabatic, palette[4]) \\\n        if len(_adiabatic) != 0 else None\n    other = from_face3ds_to_colored_mesh(_other, palette[9]) \\\n        if len(_other) != 0 else None\n\n    # create the wire frame\n    all_geo = _outdoors + _surface + _ground + _adiabatic + _other\n    wire_frame = [from_face3d_to_wireframe(face) for face in all_geo]\n", 
  "category": "Honeybee", 
  "name": "HB Vizualize by BC", 
  "description": "Visualize room geometry in the Rhino scene organized by boundary condition.\n-"
}