{
  "version": "1.7.0", 
  "nickname": "BorderShades", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "hb_objs", 
        "description": "The input Honeybee Face or Room or Aperture with extruded border\nshades added to it.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "A list of honeybee Rooms, Faces, or Apertures to which extruded\nborder shades will be added.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_depth", 
      "description": "A number for the extrusion depth. If an array of values are input\nhere, different depths will be assigned based on cardinal\ndirection, starting with north and moving clockwise.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "indoor_", 
      "description": "Boolean for whether the extrusion should be generated facing the\nopposite direction of the aperture normal and added to the Aperture's\nindoor_shades instead of outdoor_shades. If an array of values are\ninput here, different indoor booleans will be assigned based on\ncardinal direction, starting with north and moving clockwise.\nNote that indoor shades are not used in energy simulations but\nthey are used in all simulations involving Radiance. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ep_constr_", 
      "description": "Optional text for an energy construction to be used for all\ngenerated shades. This text will be used to look up a construction\nin the shade construction library. This can also be a custom\nShadeConstruction object.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "rad_mod_", 
      "description": "Optional Honeybee Modifier to be applied to the input _hb_objs.\nThis can also be text for a modifier to be looked up in the shade\nmodifier library. If an array of text or modifier objects\nare input here, different modifiers will be assigned based on\ncardinal direction, starting with north and moving clockwise.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.boundarycondition import Outdoors\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.face import Aperture\n    from honeybee.orientation import check_matching_inputs, angles_from_num_orient, \\\n        face_orient_index, inputs_by_index\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.lib.constructions import shade_construction_by_identifier\nexcept ImportError as e:\n    if ep_constr_ is not None:\n        raise ValueError('ep_constr_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n\ntry:  # import the honeybee-radiance extension\n    from honeybee_radiance.lib.modifiers import modifier_by_identifier\nexcept ImportError as e:\n    if rad_mod_ is not None:\n        raise ValueError('rad_mod_ has been specified but honeybee-radiance '\n                         'has failed to import.\\n{}'.format(e))\n\n\ndef assign_shades(aperture, depth, indoor, ep, rad):\n    \"\"\"Assign shades to an Aperture based on a set of inputs.\"\"\"\n    if isinstance(aperture.boundary_condition, Outdoors) and depth > 0:\n        new_shades = aperture.extruded_border(depth, indoor)\n        \n        # try to assign the energyplus construction\n        if ep is not None:\n            for shd in new_shades:\n                shd.properties.energy.construction = ep\n        # try to assign the radiance modifier\n        if rad is not None:\n            for shd in new_shades:\n                shd.properties.radiance.modifier = rad\n\n\nif all_required_inputs(ghenv.Component):\n    # duplicate the initial objects\n    hb_objs = [obj.duplicate() for obj in _hb_objs]\n\n    # assign default indoor_ property\n    indoor_ = indoor_ if len(indoor_) != 0 else [False]\n\n    # process the input constructions\n    if len(ep_constr_) != 0:\n        for i, constr in enumerate(ep_constr_):\n            if isinstance(constr, str):\n                ep_constr_[i] = shade_construction_by_identifier(constr)\n    else:\n        ep_constr_ = [None]\n\n    # process the input modifiers\n    if len(rad_mod_) != 0:\n        for i, mod in enumerate(rad_mod_):\n            if isinstance(mod, str):\n                rad_mod_[i] = modifier_by_identifier(mod)\n    else:\n        rad_mod_ = [None]\n\n    # gather all of the inputs together\n    all_inputs = [_depth, indoor_, ep_constr_, rad_mod_]\n\n    # ensure matching list lengths across all values\n    all_inputs, num_orient = check_matching_inputs(all_inputs)\n\n    # get a list of angles used to categorize the faces\n    angles = angles_from_num_orient(num_orient)\n\n    # loop through the input objects and add shades\n    for obj in hb_objs:\n        if isinstance(obj, Room):\n            for face in obj.faces:\n                orient_i = face_orient_index(face, angles)\n                if orient_i is None:\n                    orient_i = 0\n                depth, indr, con, mod = inputs_by_index(orient_i, all_inputs)\n                for ap in face.apertures:\n                    assign_shades(ap, depth, indr, con, mod)\n        elif isinstance(obj, Face):\n            orient_i = face_orient_index(obj, angles)\n            if orient_i is None:\n                orient_i = 0\n            depth, indr, con, mod = inputs_by_index(orient_i, all_inputs)\n            for ap in obj.apertures:\n                assign_shades(ap, depth, indr, con, mod)\n        elif isinstance(obj, Aperture):\n            orient_i = face_orient_index(obj, angles)\n            if orient_i is None:\n                orient_i = 0\n            depth, indr, con, mod = inputs_by_index(orient_i, all_inputs)\n            assign_shades(obj, depth, indr, con, mod)\n        else:\n            raise TypeError('Input _hb_objs must be a Room, Face or Aperture. '\n                            'Not {}.'.format(type(obj)))", 
  "category": "Honeybee", 
  "name": "HB Extruded Border Shades", 
  "description": "Add extruded border Shades to all the outdoor Apertures of an input Room, Face\nor Aperture.\n_\nThis is particularly useful for accounting for the depths of walls/roofs in Radiance\nsimulations or in the solar distribution calculation of EnergyPlus.\n-"
}