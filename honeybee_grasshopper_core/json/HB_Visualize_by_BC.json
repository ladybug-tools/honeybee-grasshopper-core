{
  "version": "1.7.1", 
  "nickname": "VizByBC", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "outdoors", 
        "description": "Rhino geometry for the objects with an Outdoors boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "surface", 
        "description": "Rhino geometry for the objects with a Surface (interior) boundary\ncondition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "ground", 
        "description": "Rhino geometry for the objects with a Ground boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "adiabatic", 
        "description": "Rhino geometry for the objects with an adiabatic (no heat flow)\nboundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "other", 
        "description": "Rhino geometry for all objects with a boundary condition other than\nthe four above. All shade geometry will also be added to this list.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "wire_frame", 
        "description": "A list of lines representing the outlines of the rooms.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "A Honeybee Model, Room, Face, Aperture, Door or Shade to be\npreviewed in the Rhino scene based on boundary condition.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Visualize", 
  "code": "\ntry:  # import the ladybug dependencies\n    from ladybug.color import Colorset\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.aperture import Aperture\n    from honeybee.door import Door\n    from honeybee.shade import Shade\n    from honeybee.shademesh import ShadeMesh\n    from honeybee.boundarycondition import Outdoors, Surface, Ground\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.fromgeometry import from_face3ds_to_colored_mesh, \\\n        from_face3d_to_wireframe, from_mesh3ds_to_colored_mesh, \\\n        from_mesh3d_to_wireframe\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy dependencies\n    from honeybee.boundarycondition import Adiabatic\nexcept ImportError:  # honeybee-energy is not installed\n    Adiabatic = None  # don't worry about the Adiabatic bc\n\n\ndef add_shades(hb_obj):\n    \"\"\"Add assigned shade objects to the relevant list.\"\"\"\n    _other.extend([shd.geometry for shd in hb_obj.shades])\n\n\ndef add_subface(ap, geo_list=None):\n    \"\"\"Add an aperture or a door to the relevant lists.\"\"\"\n    add_shades(ap)\n    if geo_list is None:\n        geo_list = _outdoors if isinstance(ap.boundary_condition, Outdoors) \\\n            else _surface\n    geo_list.append(ap.geometry)\n\n\ndef add_face(face):\n    \"\"\"Add a Face to the relevant lists.\"\"\"\n    add_shades(face)\n    bc = face.boundary_condition\n    if isinstance(bc, Outdoors):\n        geo_list = _outdoors\n    elif isinstance(bc, Surface):\n        geo_list = _surface\n    elif isinstance(bc, Ground):\n        geo_list = _ground\n    elif isinstance(bc, Adiabatic):\n        geo_list = _adiabatic\n    else:\n        geo_list = _other\n    geo_list.append(face.punched_geometry)\n    for ap in face.apertures:\n        add_subface(ap, geo_list)\n    for dr in face.doors:\n        add_subface(dr, geo_list)\n\n\ndef add_room(room):\n    \"\"\"Add a Room to the relevant lists.\"\"\"\n    add_shades(room)\n    for face in room:\n        add_face(face)\n\n\nif all_required_inputs(ghenv.Component):\n    # lists of {{cad}} geometry to be filled with content\n    _outdoors = []\n    _surface = []\n    _ground = []\n    _adiabatic = []\n    _other = []\n    _shade_meshes = []\n\n    # loop through the objects and group them by boundary condition\n    for hb_obj in _hb_objs:\n        if isinstance(hb_obj, Model):\n            [add_room(room) for room in hb_obj.rooms]\n            [add_face(face) for face in hb_obj.orphaned_faces]\n            [add_subface(ap) for ap in hb_obj.orphaned_apertures]\n            [add_subface(dr) for dr in hb_obj.orphaned_doors]\n            _other.extend([shd.geometry for shd in hb_obj.orphaned_shades])\n            _shade_meshes.extend([shd.geometry for shd in hb_obj.shade_meshes])\n        elif isinstance(hb_obj, Room):\n            add_room(hb_obj)\n        elif isinstance(hb_obj, Face):\n            add_face(hb_obj)\n        elif isinstance(hb_obj, Aperture):\n            add_subface(hb_obj)\n        elif isinstance(hb_obj, Door):\n            add_subface(hb_obj)\n        elif isinstance(hb_obj, Shade):\n            _other.append(hb_obj.geometry)\n        elif isinstance(hb_obj, ShadeMesh):\n            _shade_meshes.append(hb_obj.geometry)\n\n    # color all of the geometry with its respective surface type\n    palette = Colorset.openstudio_palette()\n    outdoors = from_face3ds_to_colored_mesh(_outdoors, palette[9]) \\\n        if len(_outdoors) != 0 else None\n    surface = from_face3ds_to_colored_mesh(_surface, palette[13]) \\\n        if len(_surface) != 0 else None\n    ground = from_face3ds_to_colored_mesh(_ground, palette[2]) \\\n        if len(_ground) != 0 else None\n    adiabatic = from_face3ds_to_colored_mesh(_adiabatic, palette[4]) \\\n        if len(_adiabatic) != 0 else None\n    other = from_face3ds_to_colored_mesh(_other, palette[12]) \\\n        if len(_other) != 0 else None\n\n    # create the wire frame\n    all_geo = _outdoors + _surface + _ground + _adiabatic + _other\n    wire_frame = [curve for face in all_geo for curve in from_face3d_to_wireframe(face)]\n\n    # process the shade meshes\n    if len(_shade_meshes) != 0:\n        if other is None:\n            other = []\n        else:\n            other = [other]\n        other.append(from_mesh3ds_to_colored_mesh(_shade_meshes, palette[12]))\n        for mesh in _shade_meshes:\n            wire_frame.extend(from_mesh3d_to_wireframe(mesh))\n", 
  "category": "Honeybee", 
  "name": "HB Visualize by BC", 
  "description": "Visualize room geometry in the Rhino scene organized by boundary condition.\n-"
}