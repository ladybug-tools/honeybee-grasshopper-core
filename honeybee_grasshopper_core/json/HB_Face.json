{
  "version": "1.0.0", 
  "nickname": "Face", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "faces", 
        "description": "Honeybee surface. Use this surface directly for daylight simulation\nor to create a Honeybee zone for Energy analysis.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_geo", 
      "description": "Rhino Brep geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_name_", 
      "description": "Text to set the name for the Face and to be incorporated into\nunique Face identifier. If the name is not provided, a random name\nwill be assigned.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_type_", 
      "description": "Text for the face type. The face type will be used to set the\nmaterial and construction for the surface if they are not assigned\nthrough the inputs below. The default is automatically set based\non the normal direction of the Face (up being RoofCeiling, down\nbeing Floor and vertically-oriented being Wall).\nChoose from the following:\n- Wall\n- RoofCeiling\n- Floor\n- AirBoundary", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_bc_", 
      "description": "Text for the boundary condition of the face. The boundary condition\nis also used to assign default materials and constructions as well as\nthe nature of heat excahnge across the face in energy simulation.\nDefault is Outdoors unless all vertices of the geometry lie below\nthe below the XY plane, in which case it will be set to Ground.\nChoose from the following:\n- Outdoors\n- Ground\n- Adiabatic", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "ep_constr_", 
      "description": "Optional text for the Face's energy construction to be looked\nup in the construction library. This can also be a custom OpaqueConstruction\nobject. If no energy construction is input here, the face type and\nboundary condition will be used to assign a default.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "rad_mod_", 
      "description": "Optional text for the Face's radiance modifier to be looked\nup in the modifier library. This can also be a custom modifier object.\nIf no radiance modifier is input here, the face type and boundary\ncondition will be used to assign a default.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\nimport uuid\n\ntry:  # import the core honeybee dependencies\n    from honeybee.face import Face\n    from honeybee.facetype import face_types\n    from honeybee.boundarycondition import boundary_conditions\n    from honeybee.typing import clean_and_id_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.lib.constructions import opaque_construction_by_identifier\nexcept ImportError as e:\n    if ep_constr_ is not None:\n        raise ValueError('ep_constr_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n\ntry:  # import the honeybee-radiance extension\n    from honeybee_radiance.lib.modifiers import modifier_by_identifier\nexcept ImportError as e:\n    if rad_mod_ is not None:\n        raise ValueError('rad_mod_ has been specified but honeybee-radiance '\n                         'has failed to import.\\n{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    faces = []  # list of faces that will be returned\n\n    # set default name, type, and boundary condition\n    name = clean_and_id_string(_name_) if _name_ is not None else str(uuid.uuid4())\n    if _type_ is not None and _type_ not in face_types:\n        _type_ = face_types.by_name(_type_)\n    if _bc_ is not None and _bc_ not in boundary_conditions:\n        _bc_ = boundary_conditions.by_name(_bc_)\n\n    # create the Faces\n    i = 0  # iterator to ensure each face gets a unique name\n    for geo in _geo:\n        for lb_face in to_face3d(geo):\n            hb_face = Face('{}_{}'.format(name, i), lb_face, _type_, _bc_)\n            if _name_ is not None:\n                hb_face.display_name = '{}_{}'.format(_name_, i)\n\n            # try to assign the energyplus construction\n            if ep_constr_ is not None:\n                if isinstance(ep_constr_, str):\n                    ep_constr_ = opaque_construction_by_identifier(ep_constr_)\n                hb_face.properties.energy.construction = ep_constr_\n\n            # try to assign the radiance modifier\n            if rad_mod_ is not None:\n                if isinstance(rad_mod_, str):\n                    rad_mod_ = modifier_by_identifier(rad_mod_)\n                hb_face.properties.radiance.modifier = rad_mod_\n\n            faces.append(hb_face)  # collect the final Faces\n            i += 1  # advance the iterator", 
  "category": "Honeybee", 
  "name": "HB Face", 
  "description": "Create Honeybee Face\n-"
}