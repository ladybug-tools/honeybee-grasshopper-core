{
  "version": "1.7.0", 
  "nickname": "SolveAdj", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "adj_rooms", 
        "description": "The input Honeybee Rooms with adjacencies solved between\nmatching Faces.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "A list of honeybee Rooms for which adjacencies will be solved.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ep_int_constr_", 
      "description": "Optional construction subset list from the \"HB Interior\nConstruction Subset\" component. This will be used to assign custom\nconstructions for the adjacent Faces, Apertures, and Doors found\nin the process of solving adjacency. Note that None values in the\ninput list correspond to constructions that will not change from\nthe default. If no value is input here, the default interior constructions\nwill be assigned using the adjacent Rooms' ConstructionSet.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "rad_int_mod_", 
      "description": "Optional Radiance modifier subset list from the \"HB Interior\nMaterial Subset\" component. This will be used to assign custom\nradiance modifiers for the adjacent Faces, Apertures, and Doors\nfound in the process of solving adjacency. Note that None values\nin the input list correspond to modifiers that will not change from\nthe default. If no value is input here, the default interior modifiers\nwill be assigned using the adjacent Rooms' ModifierSet.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "adiabatic_", 
      "description": "Set to True to have all of the adjacencies discovered by this\ncomponent set to an adiabatic boundary condition. If False, a Surface\nboundary condition will be used for all adjacencies. Note that adabatic\nconditions are not allowed if interior windows are assigned to interior\nfaces. Default: False.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "air_boundary_", 
      "description": "Set to True to have all of the face adjacencies discovered\nby this component set to an AirBoundary face type. Note that AirBoundary\nface types are not allowed if interior windows are assigned to interior\nfaces. Default: False.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "overwrite_", 
      "description": "Boolean to note whether existing Surface boundary conditions\nshould be overwritten. If False or None, only newly-assigned\nadjacencies will be updated.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_run", 
      "description": "Set to True to run the component and solve adjacencies.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.boundarycondition import boundary_conditions\n    from honeybee.facetype import face_types, Wall, RoofCeiling, Floor\n    from honeybee.room import Room\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the core ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy dependencies\n    from honeybee_energy.construction.opaque import OpaqueConstruction\n    from honeybee_energy.construction.window import WindowConstruction\nexcept ImportError as e:\n    if len(ep_int_constr_) != 0:\n        raise ValueError('ep_int_constr_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n    elif adiabatic_ is not None:\n        raise ValueError('adiabatic_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n\ntry:  # import the honeybee-radiance extension\n    import honeybee_radiance\nexcept ImportError as e:\n    if len(rad_int_mod_) != 0:\n        raise ValueError('rad_int_mod_ has been specified but honeybee-radiance '\n                         'has failed to import.\\n{}'.format(e))\n\n\ndef reversed_opaque_constr(construction):\n    \"\"\"Get a version of a given OpaqueConstruction that is reversed.\"\"\"\n    if construction.is_symmetric:\n        return construction\n    return OpaqueConstruction('{}_Rev'.format(construction.identifier),\n                              [mat for mat in reversed(construction.materials)])\n\n\ndef reversed_window_constr(construction):\n    \"\"\"Get a version of a given WindowConstruction that is reversed.\"\"\"\n    if construction.is_symmetric:\n        return construction\n    return WindowConstruction('{}_Rev'.format(construction.identifier),\n                              [mat for mat in reversed(construction.materials)])\n\n\ndef apply_constr_to_face(adjacent_faces, construction, face_type):\n    \"\"\"Apply a given construction to adjacent faces of a certain type.\"\"\"\n    rev_constr = reversed_opaque_constr(construction)\n    for face_pair in adjacent_faces:\n        if isinstance(face_pair[0].type, face_type):\n            face_pair[0].properties.energy.construction = construction\n            face_pair[1].properties.energy.construction = rev_constr\n        elif isinstance(face_pair[1].type, face_type):\n            face_pair[1].properties.energy.construction = construction\n            face_pair[0].properties.energy.construction = rev_constr\n\n\ndef apply_constr_to_door(adjacent_doors, construction, is_glass):\n    \"\"\"Apply a given construction to adjacent doors of a certain type.\"\"\"\n    rev_constr = reversed_window_constr(construction) if is_glass else \\\n        reversed_opaque_constr(construction)\n    for dr_pair in adjacent_doors:\n        if dr_pair[0].is_glass is is_glass:\n            dr_pair[1].properties.energy.construction = construction\n            dr_pair[0].properties.energy.construction = rev_constr\n\n\ndef apply_ep_int_constr(adj_info, ep_int_constr):\n    \"\"\"Apply the interior construction subset list to adjacent objects.\"\"\"\n    assert len(ep_int_constr) == 6, 'Input ep_int_constr_ is not valid.'\n    \n    if ep_int_constr[0] is not None:\n        apply_constr_to_face(adj_info['adjacent_faces'], ep_int_constr[0], Wall)\n    if ep_int_constr[1] is not None:\n        apply_constr_to_face(adj_info['adjacent_faces'], ep_int_constr[1], RoofCeiling)\n    if ep_int_constr[2] is not None:\n        apply_constr_to_face(adj_info['adjacent_faces'], ep_int_constr[2], Floor)\n    if ep_int_constr[3] is not None:\n        rev_constr = reversed_window_constr(ep_int_constr[3])\n        for ap_pair in adj_info['adjacent_apertures']:\n            ap_pair[1].properties.energy.construction = ep_int_constr[3]\n            ap_pair[0].properties.energy.construction = rev_constr\n    if ep_int_constr[4] is not None:\n        apply_constr_to_door(adj_info['adjacent_doors'], ep_int_constr[4], False)\n    if ep_int_constr[5] is not None:\n        apply_constr_to_door(adj_info['adjacent_doors'], ep_int_constr[5], True)\n\n\ndef apply_mod_to_face(adjacent_faces, modifier, face_type):\n    \"\"\"Apply a given modifier to adjacent faces of a certain type.\"\"\"\n    for face_pair in adjacent_faces:\n        if isinstance(face_pair[0].type, face_type):\n            face_pair[0].properties.radiance.modifier = modifier\n            face_pair[1].properties.radiance.modifier = modifier\n        elif isinstance(face_pair[1].type, face_type):\n            face_pair[1].properties.radiance.modifier = modifier\n            face_pair[0].properties.radiance.modifier = modifier\n\n\ndef apply_mod_to_door(adjacent_doors, modifier, is_glass):\n    \"\"\"Apply a given modifier to adjacent doors of a certain type.\"\"\"\n    for dr_pair in adjacent_doors:\n        if dr_pair[0].is_glass is is_glass:\n            dr_pair[1].properties.radiance.modifier = modifier\n            dr_pair[0].properties.radiance.modifier = modifier\n\n\ndef apply_rad_int_mod(adj_info, rad_int_mod):\n    \"\"\"Apply the interior modifier subset list to adjacent objects.\"\"\"\n    assert len(rad_int_mod) == 6, 'Input rad_int_mod_ is not valid.'\n    \n    if rad_int_mod[0] is not None:\n        apply_mod_to_face(adj_info['adjacent_faces'], rad_int_mod[0], Wall)\n    if rad_int_mod[1] is not None:\n        apply_mod_to_face(adj_info['adjacent_faces'], rad_int_mod[1], RoofCeiling)\n    if rad_int_mod[2] is not None:\n        apply_mod_to_face(adj_info['adjacent_faces'], rad_int_mod[2], Floor)\n    if rad_int_mod[3] is not None:\n        for ap_pair in adj_info['adjacent_apertures']:\n            ap_pair[1].properties.radiance.modifier = rad_int_mod[3]\n            ap_pair[0].properties.radiance.modifier = rad_int_mod[3]\n    if rad_int_mod[4] is not None:\n        apply_mod_to_door(adj_info['adjacent_doors'], rad_int_mod[4], False)\n    if rad_int_mod[5] is not None:\n        apply_mod_to_door(adj_info['adjacent_doors'], rad_int_mod[5], True)\n\n\nif all_required_inputs(ghenv.Component) and _run:\n    adj_rooms = [room.duplicate() for room in _rooms] # duplicate the initial objects\n\n    # solve adjacnecy\n    if overwrite_:  # find adjscencies and re-assign them\n        adj_aps = []\n        adj_doors = []\n        adj_faces = Room.find_adjacency(adj_rooms, tolerance)\n        for face_pair in adj_faces:\n            face_info = face_pair[0].set_adjacency(face_pair[1])\n            adj_aps.extend(face_info['adjacent_apertures'])\n            adj_doors.extend(face_info['adjacent_doors'])\n        adj_info = {\n            'adjacent_faces': adj_faces,\n            'adjacent_apertures': adj_aps,\n            'adjacent_doors': adj_doors\n        }\n    else:  # just solve for new adjacencies\n        adj_info = Room.solve_adjacency(adj_rooms, tolerance)\n\n    # try to assign the energyplus constructions if specified\n    if len(ep_int_constr_) != 0:\n        apply_ep_int_constr(adj_info, ep_int_constr_)\n\n    # try to assign the radiance modifiers if specified\n    if len(rad_int_mod_) != 0:\n        apply_rad_int_mod(adj_info, rad_int_mod_)\n\n    # try to assign the adiabatic boundary condition\n    if adiabatic_:\n        for face_pair in adj_info['adjacent_faces']:\n            face_pair[0].boundary_condition = boundary_conditions.adiabatic\n            face_pair[1].boundary_condition = boundary_conditions.adiabatic\n\n    # try to assign the air boundary face type\n    if air_boundary_:\n        for face_pair in adj_info['adjacent_faces']:\n            face_pair[0].type = face_types.air_boundary\n            face_pair[1].type = face_types.air_boundary\n\n    # report all of the adjacency information\n    for adj_face in adj_info['adjacent_faces']:\n        print('\"{}\" is adjacent to \"{}\"'.format(adj_face[0], adj_face[1]))\n", 
  "category": "Honeybee", 
  "name": "HB Solve Adjacency", 
  "description": "Solve adjacencies between a series of honeybee Rooms.\n_\nNote that rooms must have matching faces in order for them to be discovered as\nadjacent.\n-"
}