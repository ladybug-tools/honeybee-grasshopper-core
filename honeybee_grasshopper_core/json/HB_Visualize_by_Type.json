{
  "version": "1.7.1", 
  "nickname": "VizByType", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "walls", 
        "description": "Rhino geometry for the Walls with an Outdoors or Ground boundary\ncondition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "interior_walls", 
        "description": "Rhino geometry for the Walls with a Surface or Adiabatic\nboundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "roofs", 
        "description": "Rhino geometry for the RoofCeilings with an Outdoors or Ground\nboundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "ceilings", 
        "description": "Rhino geometry for the RoofCeilings with a Surface or Adiabatic\nboundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "exterior_floors", 
        "description": "Rhino geometry for the Floors with an Outdoors or Ground\nboundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "interior_floors", 
        "description": "Rhino geometry for the Floors with a Surface or Adiabatic\nboundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "air_walls", 
        "description": "Rhino geometry for the AirWalls.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "apertures", 
        "description": "Rhino geometry for the Apertures with an Outdoors boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "interior_apertures", 
        "description": "Rhino geometry for the Apertures with a Surface\nboundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "doors", 
        "description": "Rhino geometry for the Doors with an Outdoors boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "interior_doors", 
        "description": "Rhino geometry for the Doors with a Surface boundary condition.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "outdoor_shades", 
        "description": "Rhino geometry for the Shades assigned to the outdoors of\ntheir parent objects. This also includes all orphaned shades\nof a model.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "indoor_shades", 
        "description": "Rhino geometry for the Shades assigned to the indoors\nof their parent objects.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "wire_frame", 
        "description": "A list of lines representing the outlines of the rooms.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "A Honeybee Model, Room, Face, Aperture, Door or Shade to be\npreviewed in the Rhino scene based on type.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "1 :: Visualize", 
  "code": "\ntry:  # import the ladybug dependencies\n    from ladybug.color import Colorset\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug:\\n\\t{}'.format(e))\n\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.aperture import Aperture\n    from honeybee.door import Door\n    from honeybee.shade import Shade\n    from honeybee.shademesh import ShadeMesh\n    from honeybee.boundarycondition import Surface\n    from honeybee.facetype import Wall, RoofCeiling, Floor, AirBoundary\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.fromgeometry import from_face3ds_to_colored_mesh, \\\n        from_mesh3ds_to_colored_mesh, from_face3d_to_wireframe, \\\n        from_mesh3d_to_wireframe\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee.boundarycondition import Adiabatic\nexcept ImportError:  # honeybee-energy not installed\n    Adiabatic = None  # don't worry about Aidabatic; Surface is the only interior bc\n\n\ndef add_shade(hb_obj):\n    \"\"\"Add assigned shade objects to the relevant lists.\"\"\"\n    _outdoor_shades.extend([shd.geometry for shd in hb_obj.outdoor_shades])\n    _indoor_shades.extend([shd.geometry for shd in hb_obj.indoor_shades])\n\n\ndef add_aperture(ap):\n    \"\"\"Add an aperture to the relevant lists.\"\"\"\n    add_shade(ap)\n    if isinstance(ap.boundary_condition, Surface):\n        _interior_apertures.append(ap.geometry)\n    else:\n        _apertures.append(ap.geometry)\n\n\ndef add_door(dr):\n    \"\"\"Add a door to the relevant lists.\"\"\"\n    add_shade(dr)\n    if isinstance(dr.boundary_condition, Surface):\n        _interior_doors.append(dr.geometry)\n    else:\n        _doors.append(dr.geometry)\n\n\ndef add_face(face):\n    \"\"\"Add a Face to the relevant lists.\"\"\"\n    add_shade(face)\n    bc = face.boundary_condition\n    type = face.type\n    if isinstance(type, Wall):\n        if isinstance(bc, (Surface, Adiabatic)):\n            _interior_walls.append(face.punched_geometry)\n        else:\n            _walls.append(face.punched_geometry)\n    elif isinstance(type, RoofCeiling):\n        if isinstance(bc, (Surface, Adiabatic)):\n            _ceilings.append(face.punched_geometry)\n        else:\n            _roofs.append(face.punched_geometry)\n    elif isinstance(type, Floor):\n        if isinstance(bc, (Surface, Adiabatic)):\n            _interior_floors.append(face.punched_geometry)\n        else:\n            _exterior_floors.append(face.punched_geometry)\n    elif isinstance(type, AirBoundary):\n        _air_walls.append(face.punched_geometry)\n\n    # add the apertures, doors, and shades\n    for ap in face.apertures:\n        add_aperture(ap)\n    for dr in face.doors:\n        add_door(dr)\n\n\ndef add_room(room):\n    \"\"\"Add a Room to the relevant lists.\"\"\"\n    add_shade(room)\n    for face in room:\n        add_face(face)\n\n\nif all_required_inputs(ghenv.Component):\n    # lists of {{cad}} geometry to be filled with content\n    _walls = []\n    _interior_walls = []\n    _roofs = []\n    _ceilings = []\n    _exterior_floors = []\n    _interior_floors = []\n    _air_walls = []\n    _apertures = []\n    _interior_apertures = []\n    _doors = []\n    _interior_doors = []\n    _outdoor_shades = []\n    _indoor_shades = []\n    _shade_meshes = []\n\n    # loop through the objects and group them by type\n    for hb_obj in _hb_objs:\n        if isinstance(hb_obj, Model):\n            [add_room(room) for room in hb_obj.rooms]\n            [add_face(face) for face in hb_obj.orphaned_faces]\n            [add_aperture(ap) for ap in hb_obj.orphaned_apertures]\n            [add_door(dr) for dr in hb_obj.orphaned_doors]\n            _outdoor_shades.extend([shd.geometry for shd in hb_obj.orphaned_shades])\n            _shade_meshes.extend([shd.geometry for shd in hb_obj.shade_meshes])\n        elif isinstance(hb_obj, Room):\n            add_room(hb_obj)\n        elif isinstance(hb_obj, Face):\n            add_face(hb_obj)\n        elif isinstance(hb_obj, Aperture):\n            add_aperture(hb_obj)\n        elif isinstance(hb_obj, Door):\n            add_door(hb_obj)\n        elif isinstance(hb_obj, Shade):\n            if hb_obj.is_indoor:\n                _indoor_shades.append(hb_obj.geometry)\n            else:\n                _outdoor_shades.append(hb_obj.geometry)\n        elif isinstance(hb_obj, ShadeMesh):\n            _shade_meshes.append(hb_obj.geometry)\n\n    # color all of the geometry with its respective surface type\n    palette = Colorset.openstudio_palette()\n    walls = from_face3ds_to_colored_mesh(_walls, palette[0]) \\\n        if len(_walls) != 0 else None\n    interior_walls = from_face3ds_to_colored_mesh(_interior_walls, palette[1]) \\\n        if len(_interior_walls) != 0 else None\n    roofs = from_face3ds_to_colored_mesh(_roofs, palette[3]) \\\n        if len(_roofs) != 0 else None\n    ceilings = from_face3ds_to_colored_mesh(_ceilings, palette[4]) \\\n        if len(_ceilings) != 0 else None\n    exterior_floors = from_face3ds_to_colored_mesh(_exterior_floors, palette[6]) \\\n        if len(_exterior_floors) != 0 else None\n    interior_floors = from_face3ds_to_colored_mesh(_interior_floors, palette[7]) \\\n        if len(_interior_floors) != 0 else None\n    air_walls = from_face3ds_to_colored_mesh(_air_walls, palette[12]) \\\n        if len(_air_walls) != 0 else None\n    apertures = from_face3ds_to_colored_mesh(_apertures, palette[9]) \\\n        if len(_apertures) != 0 else None\n    interior_apertures = from_face3ds_to_colored_mesh(_interior_apertures, palette[9]) \\\n        if len(_interior_apertures) != 0 else None\n    doors = from_face3ds_to_colored_mesh(_doors, palette[10]) \\\n        if len(_doors) != 0 else None\n    interior_doors = from_face3ds_to_colored_mesh(_interior_doors, palette[10]) \\\n        if len(_interior_doors) != 0 else None\n    outdoor_shades = from_face3ds_to_colored_mesh(_outdoor_shades, palette[11]) \\\n        if len(_outdoor_shades) != 0 else None\n    indoor_shades = from_face3ds_to_colored_mesh(_indoor_shades, palette[11]) \\\n        if len(_indoor_shades) != 0 else None\n\n    # create the wire frame\n    all_geo = _walls + _interior_walls + _roofs + _ceilings + _exterior_floors + \\\n        _interior_floors + _air_walls + _apertures + _interior_apertures + _doors + \\\n        _interior_doors + _outdoor_shades + _indoor_shades\n    wire_frame = [curve for face in all_geo for curve in from_face3d_to_wireframe(face)]\n\n    # process the shade meshes\n    if len(_shade_meshes) != 0:\n        if outdoor_shades is None:\n            outdoor_shades = []\n        else:\n            outdoor_shades = [outdoor_shades]\n        outdoor_shades.append(from_mesh3ds_to_colored_mesh(_shade_meshes, palette[11]))\n        for mesh in _shade_meshes:\n            wire_frame.extend(from_mesh3d_to_wireframe(mesh))\n", 
  "category": "Honeybee", 
  "name": "HB Visualize by Type", 
  "description": "Visualize room geometry in the Rhino scene organized by object and face type.\n-"
}