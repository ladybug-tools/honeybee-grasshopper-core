{
  "version": "1.7.1", 
  "nickname": "Model", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "model", 
        "description": "A Honeybee Model object possessing all of the input geometry\nobjects.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "rooms_", 
      "description": "A list of honeybee Rooms to be added to the Model. Note that at\nleast one Room is necessary to make a simulate-able energy model.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "faces_", 
      "description": "A list of honeybee Faces to be added to the Model. Note that\nfaces without a parent Room are not allowed for energy models.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "shades_", 
      "description": "A list of honeybee Shades or ShadeMeshes to be added to the Model.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "apertures_", 
      "description": "A list of honeybee Apertures to be added to the Model. Note\nthat apertures without a parent Face are not allowed for energy models.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "doors_", 
      "description": "A list of honeybee Doors to be added to the Model. Note\nthat doors without a parent Face are not allowed for energy models.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_name_", 
      "description": "Text to be used for the Model name and to be incorporated into a unique\nmodel identifier. If no name is provided, it will be \"unnamed\" and\na unique model identifier will be auto-generated.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.shademesh import ShadeMesh\n    from honeybee.model import Model\n    from honeybee.typing import clean_string, clean_and_id_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\n    from ladybug_{{cad}}.config import units_system, tolerance, angle_tolerance\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef check_all_geo_none():\n    \"\"\"Check whether all of the geometry inputs to this component are None.\"\"\"\n    return all(obj_list == [] or obj_list == [None] for obj_list in\n               (rooms_, faces_, shades_, apertures_, doors_))\n\n\nif all_required_inputs(ghenv.Component) and not check_all_geo_none():\n    # set a default name and get the {{Cad}} Model units\n    name = clean_string(_name_) if _name_ is not None else clean_and_id_string('unnamed')\n    units = units_system()\n\n    # separate shades and shade meshes\n    shades, shade_meshes = [], []\n    if len(shades_) != 0:\n        for obj in shades_:\n            if isinstance(obj, ShadeMesh):\n                shade_meshes.append(obj)\n            else:\n                shades.append(obj)\n\n    # create the model\n    model = Model(\n        name, rooms_, faces_, shades, apertures_, doors_, shade_meshes,\n        units=units, tolerance=tolerance, angle_tolerance=angle_tolerance)\n    model.display_name = _name_ if _name_ is not None else 'unnamed'\n", 
  "category": "Honeybee", 
  "name": "HB Model", 
  "description": "Create a Honeybee Model, which can be sent for simulation.\n-"
}