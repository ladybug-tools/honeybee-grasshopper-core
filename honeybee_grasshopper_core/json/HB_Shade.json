{
  "version": "0.2.0", 
  "nickname": "Shade", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "shades", 
        "description": "Honeybee shades. These can be used directly in radiance and\nenergy simulations.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_geo", 
      "description": "Rhino Brep geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_name_", 
      "description": "Text to set the name for the Shade and to be incorporated into\nunique Shade identifier. If the name is not provided, a random name\nwill be assigned.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "ep_constr_", 
      "description": "Optional text for the Shade's energy construction to be looked\nup in the construction library. This can also be a custom construction\nobject. If no energy construction is input here, a default will be\nassigned.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "ep_trans_sch_", 
      "description": "Optional text for the Shade's energy transmittance schedule\nto be looked up in the schedule library. This can also be a custom\nschedule object. If no energy schedule is input here, the default will\nbe always opaque.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "rad_mod_", 
      "description": "Optional text for the Shade's radiance modifier to be looked\nup in the modifier library. This can also be a custom modifier object.\nIf no radiance modifier is input here, a default will be assigned.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\nimport uuid\n\ntry:  # import the core honeybee dependencies\n    from honeybee.shade import Shade\n    from honeybee.typing import clean_and_id_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.lib.constructions import shade_construction_by_identifier\n    from honeybee_energy.lib.schedules import schedule_by_identifier\nexcept ImportError as e:\n    if ep_constr_ is not None:\n        raise ValueError('ep_constr_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n    elif ep_trans_sch_ is not None:\n        raise ValueError('ep_trans_sch_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n\ntry:  # import the honeybee-radiance extension\n    from honeybee_radiance.lib.modifiers import modifier_by_identifier\nexcept ImportError as e:\n    if rad_mod_ is not None:\n        raise ValueError('rad_mod_ has been specified but honeybee-radiance '\n                         'has failed to import.\\n{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    shades = []  # list of shades that will be returned\n\n    # set default name\n    name = clean_and_id_string(_name_) if _name_ is not None else str(uuid.uuid4())\n\n    # create the Shades\n    i = 0  # iterator to ensure each shade gets a unique name\n    for geo in _geo:\n        for lb_face in to_face3d(geo):\n            hb_shd = Shade('{}_{}'.format(name, i), lb_face)\n            if _name_ is not None:\n                hb_shd.display_name = '{}_{}'.format(_name_, i)\n\n            # try to assign the energyplus construction\n            if ep_constr_ is not None:\n                if isinstance(ep_constr_, str):\n                    ep_constr_ = shade_construction_by_identifier(ep_constr_)\n                hb_shd.properties.energy.construction = ep_constr_\n\n            # try to assign the energyplus transmittance schedule\n            if ep_trans_sch_ is not None:\n                if isinstance(ep_trans_sch_, str):\n                    ep_trans_sch_ = schedule_by_identifier(ep_trans_sch_)\n                hb_shd.properties.energy.transmittance_schedule = ep_trans_sch_\n\n            # try to assign the radiance modifier\n            if rad_mod_ is not None:\n                if isinstance(rad_mod_, str):\n                    rad_mod_ = modifier_by_identifier(rad_mod_)\n                hb_shd.properties.radiance.modifier = rad_mod_\n\n            shades.append(hb_shd)  # collect the final Shades\n            i += 1  # advance the iterator", 
  "category": "Honeybee", 
  "name": "HB Shade", 
  "description": "Create Honeybee Shade\n-"
}