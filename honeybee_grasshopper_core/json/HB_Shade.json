{
  "version": "1.7.0", 
  "nickname": "Shade", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "shades", 
        "description": "Honeybee shades. These can be used directly in radiance and\nenergy simulations.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_geo", 
      "description": "Rhino Brep or Mesh geometry.", 
      "type": "GeometryBase", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "_name_", 
      "description": "Text to set the name for the Shade and to be incorporated into\nunique Shade identifier. If the name is not provided, a random name\nwill be assigned.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "attached_", 
      "description": "Boolean to note whether the Shade is attached to other geometry.\nThis is automatically set to True if the Shade is assigned to\na parent Room, Face, Aperture or Door but will otherwise defalt\nto False. If the Shade is not easily assignable to a parent\nobject but is attached to the building (eg. a parapet or large\nroof overhang), then this should be set to True. (Default: False).", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ep_constr_", 
      "description": "Optional text for the Shade's energy construction to be looked\nup in the construction library. This can also be a custom construction\nobject. If no energy construction is input here, a default will be\nassigned.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "ep_trans_sch_", 
      "description": "Optional text for the Shade's energy transmittance schedule\nto be looked up in the schedule library. This can also be a custom\nschedule object. If no energy schedule is input here, the default will\nbe always opaque.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "rad_mod_", 
      "description": "Optional text for the Shade's radiance modifier to be looked\nup in the modifier library. This can also be a custom modifier object.\nIf no radiance modifier is input here, a default will be assigned.", 
      "type": "System.Object", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.shade import Shade\n    from honeybee.typing import clean_and_id_string\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, longest_list, \\\n        wrap_output\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\ntry:  # import the honeybee-energy extension\n    from honeybee_energy.lib.constructions import shade_construction_by_identifier\n    from honeybee_energy.lib.schedules import schedule_by_identifier\nexcept ImportError as e:\n    if len(ep_constr_) != 0:\n        raise ValueError('ep_constr_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n    elif len(ep_trans_sch_) != 0:\n        raise ValueError('ep_trans_sch_ has been specified but honeybee-energy '\n                         'has failed to import.\\n{}'.format(e))\n\ntry:  # import the honeybee-radiance extension\n    from honeybee_radiance.lib.modifiers import modifier_by_identifier\nexcept ImportError as e:\n    if len(rad_mod_) != 0:\n        raise ValueError('rad_mod_ has been specified but honeybee-radiance '\n                         'has failed to import.\\n{}'.format(e))\n\n# define special meshing parameters that are better for shades\ntry:  # use try/except so that the code is still usable without {{Cad}}Common\n    import {{Cad}}.Geometry.MeshingParameters as mp\n    meshing_parameters = mp.FastRenderMesh\nexcept ImportError:\n    meshing_parameters = None\n\nif all_required_inputs(ghenv.Component):\n    shades = []  # list of shades that will be returned\n    for j, geo in enumerate(_geo):\n        if len(_name_) == 0:  # make a default Shade name\n            name = display_name = clean_and_id_string('Shade')\n        else:\n            display_name = '{}_{}'.format(longest_list(_name_, j), j + 1) \\\n                if len(_name_) != len(_geo) else longest_list(_name_, j)\n            name = clean_and_id_string(display_name)\n        is_detached = not longest_list(attached_, j) if len(attached_) != 0 else True\n\n        lb_faces = to_face3d(geo, meshing_parameters)\n        for i, lb_face in enumerate(lb_faces):\n            shd_name = '{}_{}'.format(name, i) if len(lb_faces) > 1 else name\n            hb_shd = Shade(shd_name, lb_face, is_detached)\n            hb_shd.display_name = display_name\n\n            # try to assign the energyplus construction\n            if len(ep_constr_) != 0:\n                ep_constr = longest_list(ep_constr_, j)\n                if isinstance(ep_constr, str):\n                    ep_constr = shade_construction_by_identifier(ep_constr)\n                hb_shd.properties.energy.construction = ep_constr\n\n            # try to assign the energyplus transmittance schedule\n            if len(ep_trans_sch_) != 0:\n                ep_trans_sch = longest_list(ep_trans_sch_, j)\n                if isinstance(ep_trans_sch, str):\n                    ep_trans_sch = schedule_by_identifier(ep_trans_sch)\n                hb_shd.properties.energy.transmittance_schedule = ep_trans_sch\n\n            # try to assign the radiance modifier\n            if len(rad_mod_) != 0:\n                rad_mod = longest_list(rad_mod_, j)\n                if isinstance(rad_mod, str):\n                    rad_mod = modifier_by_identifier(rad_mod)\n                hb_shd.properties.radiance.modifier = rad_mod\n\n            shades.append(hb_shd)  # collect the final Shades\n            i += 1  # advance the iterator\n    shades = wrap_output(shades)", 
  "category": "Honeybee", 
  "name": "HB Shade", 
  "description": "Create Honeybee Shade.\n-"
}