{
  "version": "1.7.0", 
  "nickname": "Scale", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "hb_objs", 
        "description": "The input _hb_objs that has been scaled by the input factor.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "Any Honeybee geometry object (eg. Room, Face, Aperture, Door or\nShade) to be scaled by a factor. This can also be a Honeybee Model\nobject to be scaled.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_factor", 
      "description": "A number representing how much the object should be scaled.", 
      "type": "double", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_origin_", 
      "description": "A Point3D representing the origin from which to scale. If None, \nit will be scaled from each object's center point unless the input\nobject is a Model, in which case, it will be scaled from the world\norigin (0, 0, 0).", 
      "type": "Point3d", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "prefix_", 
      "description": "Optional text string that will be inserted at the start of the\nidentifiers and display names of all transformed objects, their child\nobjects, and their adjacent Surface boundary condition objects. This\nis particularly useful in workflows where you duplicate and edit a\nstarting object and then want to combine it with the original object\ninto one Model (like making a model of repeated rooms) since all\nobjects within a Model must have unique identifiers. It is recommended\nthat this prefix be short to avoid maxing out the 100 allowable\ncharacters for honeybee identifiers. If None, no prefix will be\nadded to the input objects and all identifiers and display names\nwill remain the same. Default: None.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the honeybee core dependencies\n    from honeybee.model import Model\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.togeometry import to_point3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    hb_objs = [obj.duplicate() for obj in _hb_objs]  # duplicate the initial objects\n    \n    # check that the factor is positive\n    assert _factor > 0, 'Input _factor must be greater than 0.'\n    \n    # set the default origin\n    if _origin_ is not None:\n        pt = to_point3d(_origin_)\n    else:\n        pt = []\n        for obj in hb_objs:\n            origin = obj.center if not isinstance(obj, Model) else None\n            pt.append(origin)\n    \n    # scale all of the objects\n    if _origin_ is not None:\n        for obj in hb_objs:\n            obj.scale(_factor, pt)\n    else:  # unique origin point for each object\n        for i, obj in enumerate(hb_objs):\n            obj.scale(_factor, pt[i])\n    \n    # add the prefix if specified\n    if prefix_ is not None:\n        for obj in hb_objs:\n            obj.add_prefix(prefix_)", 
  "category": "Honeybee", 
  "name": "HB Scale", 
  "description": "Scale any Honeybee geometry object or a Model by a factor.\n-"
}