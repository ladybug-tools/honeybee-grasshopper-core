{
  "version": "1.8.0", 
  "nickname": "DumpObjects", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "hb_file", 
        "description": "The location of the file where the honeybee JSON is saved.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_hb_objs", 
      "description": "A list of Honeybee objects to be written to a file.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_name_", 
      "description": "A name for the file to which the honeybee objects will be\nwritten. (Default: 'unnamed').", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_folder_", 
      "description": "An optional directory into which the honeybee objects will be\nwritten.  The default is set to the default simulation folder.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "indent_", 
      "description": "An optional positive integer to set the indentation used in the\nresulting JSON file.", 
      "type": "int", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "abridged_", 
      "description": "Set to \"True\" to serialize the object in its abridged form.\nAbridged objects cannot be reserialized back to honeybee objects\non their own but they are used throughout honeybee to minimize\nfile size and unnecessary duplication.", 
      "type": "bool", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_dump", 
      "description": "Set to \"True\" to save the honeybee objects to file.", 
      "type": "bool", 
      "default": null
    }
  ], 
  "subcategory": "3 :: Serialize", 
  "code": "\nimport sys\nimport os\nimport json\n\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.room import Room\n    from honeybee.face import Face\n    from honeybee.aperture import Aperture\n    from honeybee.door import Door\n    from honeybee.shade import Shade\n    from honeybee.config import folders\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the core ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, give_warning\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\ndef geo_object_warning(obj):\n    \"\"\"Give a warning that individual geometry objects should be added to a Model.\"\"\"\n    msg = 'An individual {} has been connected to the _hb_objs.\\n' \\\n        'The recommended practice is to add this object to a Model and\\n' \\\n        'serialize the Model instead of serializing individual objects.'.format(\n            obj.__class__.__name__)\n    print(msg)\n    give_warning(ghenv.Component, msg)\n\n\nif all_required_inputs(ghenv.Component) and _dump:\n    # set the component defaults\n    name = _name_ if _name_ is not None else 'unnamed'\n    file_name = '{}.json'.format(name) if len(_hb_objs) > 1 or not \\\n        isinstance(_hb_objs[0], Model) else '{}.hbjson'.format(name)\n    folder = _folder_ if _folder_ is not None else folders.default_simulation_folder\n    hb_file = os.path.join(folder, file_name)\n    abridged = bool(abridged_)\n\n    # check to see if any objects are of the geometry type and give a warning\n    geo_types = (Room, Face, Aperture, Door, Shade)\n    for obj in _hb_objs:\n        if isinstance(obj, geo_types):\n            geo_object_warning(obj)\n\n    # create the dictionary to be written to a JSON file\n    if len(_hb_objs) == 1:  # write a single object into a file if the length is 1\n        try:\n            obj_dict = _hb_objs[0].to_dict(abridged=abridged)\n        except TypeError:  # no abridged option\n            obj_dict = _hb_objs[0].to_dict()\n    else:  # create a dictionary of the objects that are indexed by name\n        obj_dict = {}\n        for obj in _hb_objs:\n            try:\n                obj_dict[obj.identifier] = obj.to_dict(abridged=abridged)\n            except TypeError:  # no abridged option\n                obj_dict[obj.identifier] = obj.to_dict()\n\n    # write the dictionary into a file\n    if not os.path.isdir(folder):\n        os.makedirs(folder)\n    if (sys.version_info < (3, 0)):  # we need to manually encode it as UTF-8\n        with open(hb_file, 'wb') as fp:\n            obj_str = json.dumps(obj_dict, indent=indent_, ensure_ascii=False)\n            fp.write(obj_str.encode('utf-8'))\n    else:\n        with open(hb_file, 'w', encoding='utf-8') as fp:\n            obj_str = json.dump(obj_dict, fp, indent=indent_, ensure_ascii=False)\n", 
  "category": "Honeybee", 
  "name": "HB Dump Objects", 
  "description": "Dump any honeybee object to a JSON file. You can use \"HB Load Objects\" component\nto load the objects from the file back into Grasshopper.\n-\nHoneybee objects include any honeybee energy Material, Construction,\nConstructionSet, Schedule, Load, ProgramType, or Simulation object.\n-"
}