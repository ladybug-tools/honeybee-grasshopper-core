{
  "version": "1.9.0", 
  "nickname": "RoomsByAttr", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "values", 
        "description": "A list of values with one attribute value for each branch of the\noutput rooms.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "rooms", 
        "description": "A data tree of honeybee rooms with each branch of the tree\nrepresenting a different attribute value.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "list", 
      "name": "_rooms", 
      "description": "An array of honeybee Rooms or honeybee Models to be separated\nand grouped based on their attributes.", 
      "type": "System.Object", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "_attribute", 
      "description": "Text for the name of the Room attribute with which the\nRooms should be labeled. The Honeybee \"Room Attributes\" component\nlists all of the core attributes of the room. Also, each Honeybee\nextension (ie. Radiance, Energy) includes its own component that\nlists the Room attributes of that extension.", 
      "type": "string", 
      "default": null
    }, 
    {
      "access": "list", 
      "name": "value_", 
      "description": "An optional value of the attribute that can be used to filter\nthe output rooms. For example, if the input attribute is \"Program\"\na value for the name of a program can be plugged in here\n(eg. \"2019::LargeOffice::OpenOffice\") in order to get only the\nrooms that have this program assigned.", 
      "type": "string", 
      "default": null
    }
  ], 
  "subcategory": "2 :: Organize", 
  "code": "\ntry:  # import the core honeybee dependencies\n    from honeybee.model import Model\n    from honeybee.room import Room\n    from honeybee.colorobj import ColorRoom\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import honeybee:\\n\\t{}'.format(e))\n\ntry:  # import the core dragonfly dependencies\n    from dragonfly.room2d import Room2D\n    from dragonfly.colorobj import ColorRoom2D\nexcept ImportError as e:  # dragonfly not available\n    Room2D = Room\n    ColorRoom2D = ColorRoom\n\ntry:  # import the ladybug_{{cad}} dependencies\n    \n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # extract any rooms from input Models\n    in_rooms, ColorClass = [], ColorRoom\n    for hb_obj in _rooms:\n        if isinstance(hb_obj, Room):\n            in_rooms.append(hb_obj)\n        elif isinstance(hb_obj, Model):\n            in_rooms.extend(hb_obj.rooms)\n        elif isinstance(hb_obj, Room2D):\n            in_rooms.append(hb_obj)\n            ColorClass = ColorRoom2D\n        else:\n            raise TypeError('Expected Room or Model. Got {}.'.format(type(hb_obj)))\n\n    # use the ColorRoom object to get a set of attributes assigned to the rooms\n    color_obj = ColorClass(in_rooms, _attribute)\n\n    # loop through each of the rooms and get the attributes\n    if len(value_) == 0:\n        values = color_obj.attributes_unique\n        rooms = [[] for val in values]\n        for atr, room in zip(color_obj.attributes, in_rooms):\n            atr_i = values.index(atr)\n            rooms[atr_i].append(room)\n    else:\n        values = [atr for atr in color_obj.attributes_unique if atr in value_]\n        rooms = [[] for val in values]\n        for atr, room in zip(color_obj.attributes, in_rooms):\n            if atr in values:\n                atr_i = values.index(atr)\n                rooms[atr_i].append(room)\n    rooms = list_to_data_tree(rooms)\n", 
  "category": "Honeybee", 
  "name": "HB Rooms by Attribute", 
  "description": "Separate and group honeybee Rooms by any attribute that the room possesses.\n_\nThis can be used to group rooms by program, whether rooms are conditioned, etc.\n-"
}