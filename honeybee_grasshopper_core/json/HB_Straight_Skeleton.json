{
  "version": "1.8.1", 
  "nickname": "Skeleton", 
  "outputs": [
    [
      {
        "access": "None", 
        "name": "skeleton", 
        "description": "A list of line segments that represent the straight skeleton of\nthe input _floor_geo. This will be output from the component no matter\nwhat the input _floor_geo is.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "perim_poly", 
        "description": "A list of breps representing the perimeter polygons of the input\n_floor_geo. This will only be ouput if an offset_ is input.", 
        "type": null, 
        "default": null
      }, 
      {
        "access": "None", 
        "name": "core_poly", 
        "description": "A list of breps representing the core polygons of the input\n_floor_geo. This will only be ouput if an offset_ is input and the offset\nis not so great as to eliminate the core.", 
        "type": null, 
        "default": null
      }
    ]
  ], 
  "inputs": [
    {
      "access": "item", 
      "name": "_floor_geo", 
      "description": "Horizontal Rhino surfaces for which the straight skeleton\nwill be computed.", 
      "type": "Brep", 
      "default": null
    }, 
    {
      "access": "item", 
      "name": "offset_", 
      "description": "An optional positive number that will be used to offset the\nperimeter of the geometry to output core/perimeter polygons.\nIf a value is plugged in here and the straight skeleton is not\nself-intersecting, perim_poly and core_poly will be ouput.", 
      "type": "double", 
      "default": null
    }
  ], 
  "subcategory": "0 :: Create", 
  "code": "\ntry:  # import the core ladybug_geometry dependencies\n    from ladybug_geometry.geometry3d import LineSegment3D\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the core ladybug_geometry dependencies\n    from ladybug_geometry_polyskel.polyskel import skeleton_as_edge_list\n    from ladybug_geometry_polyskel.polysplit import perimeter_core_subfaces_and_skeleton\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_geometry:\\n\\t{}'.format(e))\n\ntry:  # import the ladybug_{{cad}} dependencies\n    from ladybug_{{cad}}.config import tolerance\n    from ladybug_{{cad}}.togeometry import to_face3d\n    from ladybug_{{cad}}.fromgeometry import from_face3d, from_linesegment3d\n    from ladybug_{{cad}}.{{plugin}} import all_required_inputs, list_to_data_tree\nexcept ImportError as e:\n    raise ImportError('\\nFailed to import ladybug_{{cad}}:\\n\\t{}'.format(e))\n\n\nif all_required_inputs(ghenv.Component):\n    # extract the straight skeleton and sub-faces from the geometry\n    skeleton, perim_poly, core_poly = [], [], []\n    for face in to_face3d(_floor_geo):\n        if offset_ is not None and offset_ > 0:\n            skel, perim, core = perimeter_core_subfaces_and_skeleton(\n                face, offset_, tolerance)\n            skeleton.append([from_linesegment3d(lin) for lin in skel])\n            perim_poly.append([from_face3d(p) for p in perim])\n            core_poly.append([from_face3d(c) for c in core])\n        else:\n            skel_2d = skeleton_as_edge_list(\n                face.boundary_polygon2d, face.hole_polygon2d,\n                tolerance, intersect=True)\n            skel_3d = []\n            for seg in skel_2d:\n                verts_3d = tuple(face.plane.xy_to_xyz(pt) for pt in seg.vertices)\n                skel_3d.append(LineSegment3D.from_end_points(*verts_3d))\n            skeleton.append([from_linesegment3d(lin) for lin in skel_3d])\n\n    # convert outputs to data trees\n    skeleton = list_to_data_tree(skeleton)\n    perim_poly = list_to_data_tree(perim_poly)\n    core_poly = list_to_data_tree(core_poly)\n", 
  "category": "Honeybee", 
  "name": "HB Straight Skeleton", 
  "description": "Get the straight skeleton and core/perimeter sub-faces for any planar geometry.\n_\nThis component uses a modified version of the the polyskel package\n(https://github.com/Botffy/polyskel) by Armin Scipiades (aka. @Bottfy),\nwhich is, itself, a Python implementation of the straight skeleton\nalgorithm as described by Felkel and Obdrzalek in their 1998 conference paper\nStraight skeleton implementation\n(https://github.com/Botffy/polyskel/blob/master/doc/StraightSkeletonImplementation.pdf).\n-"
}